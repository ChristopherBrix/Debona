stages:
  - "Build base Docker image"
  - "Lint"
  - "Test"
  - "Build Docker image with code"
  - "Release"

variables:
  TEST_IMAGE: $CI_REGISTRY_IMAGE:branch-$CI_COMMIT_REF_NAME-base
  TEST_IMAGE_WITH_CODE: $CI_REGISTRY_IMAGE:branch-$CI_COMMIT_REF_NAME-complete
  RELEASE_IMAGE_WITH_CODE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

build_docker_base:
  stage: "Build base Docker image"
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${TEST_IMAGE} --target base
        --cache-from=ubuntu:20.04,${TEST_IMAGE} -f ${CI_PROJECT_DIR}/src/Dockerfile .
    - docker push ${TEST_IMAGE}
  only:
    - merge_requests

isort:
  stage: "Lint"
  image: ${TEST_IMAGE}
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only --diff-filter=d origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        | { grep "\.py$" || test $? = 1; }
        | xargs --no-run-if-empty pipenv run isort --settings-file src/setup.cfg
            --check-only
  only:
    - merge_requests

black:
  stage: "Lint"
  image: ${TEST_IMAGE}
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only --diff-filter=d origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        | { grep "\.py$" || test $? = 1; }
        | xargs --no-run-if-empty pipenv run black --check
            --experimental-string-processing
  only:
    - merge_requests

flake8:
  stage: "Lint"
  image: ${TEST_IMAGE}
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only --diff-filter=d origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        | { grep "\.py$" || test $? = 1; }
        | xargs --no-run-if-empty pipenv run flake8 --config=src/setup.cfg
  only:
    - merge_requests

pylint:
  stage: "Lint"
  image: ${TEST_IMAGE}
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only --diff-filter=d origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        | { grep "\.py$" || test $? = 1; }
        | xargs --no-run-if-empty pipenv run pylint --rcfile=src/setup.cfg
  only:
    - merge_requests

mypy:
  stage: "Lint"
  image: ${TEST_IMAGE}
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - git diff --name-only --diff-filter=d origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        | { grep "\.py$" || test $? = 1; }
        | xargs --no-run-if-empty pipenv run mypy --config-file=src/setup.cfg
            --cache-dir=/cache/mypy
  only:
    - merge_requests

example:
  stage: "Test"
  image: ${TEST_IMAGE}
  script:
    - cd ${CI_PROJECT_DIR}/example; pipenv run python example.py > output.txt
    - |
      echo "Running example run for local robustness verification objective:
      Statistics for epsilon = 8:
      Verification results: Status.SAFE
      Branches explored: 9
      Maximum depth reached: 3
      Statistics for epsilon = 15:
      Verification results: Status.UNSAFE
      Branches explored: 1
      Maximum depth reached: 0
      Running example run with custom VeriNetNN and the local robustness verification objective:
      Verification results: Status.SAFE
      Branches explored: 15
      Maximum depth reached: 4" > ${CI_PROJECT_DIR}/example/expected_output.txt
    - diff -q ${CI_PROJECT_DIR}/example/expected_output.txt <(grep -f
        ${CI_PROJECT_DIR}/example/expected_output.txt
        ${CI_PROJECT_DIR}/example/output.txt)
  only:
    - merge_requests
  allow_failure: true

build_docker_complete:
  stage: "Build Docker image with code"
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${TEST_IMAGE_WITH_CODE} --target complete
        --cache-from=ubuntu:20.04,${TEST_IMAGE} -f ${CI_PROJECT_DIR}/src/Dockerfile .
    - docker push ${TEST_IMAGE_WITH_CODE}
  only:
    - merge_requests

release:
  stage: "Release"
  image: docker:19.03.12
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/' # A specific tag with 'vX.Y.Z' pattern is created
  services:
    - docker:19.03.12-dind
  script:
    - apk update
    - apk add curl
    - curl -L --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${RELEASE_IMAGE_WITH_CODE} --target complete -f
        ${CI_PROJECT_DIR}/src/Dockerfile .
    - docker push ${RELEASE_IMAGE_WITH_CODE}
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Release $CI_COMMIT_TAG'